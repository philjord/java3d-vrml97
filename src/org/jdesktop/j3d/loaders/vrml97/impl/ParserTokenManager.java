/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package org.jdesktop.j3d.loaders.vrml97.impl;
import java.util.*;
import java.net.*;
import java.io.File;
import java.io.Reader;
import java.util.StringTokenizer;
import java.lang.reflect.Constructor;

public class ParserTokenManager implements ParserConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3ffffbfffc000L) != 0L)
         {
            jjmatchedKind = 50;
            return 19;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x28000000L) != 0L)
            return 19;
         if ((active0 & 0x3ffff97ffc000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 19;
         }
         return -1;
      case 2:
         if ((active0 & 0x3ffff97f3c000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
            return 19;
         }
         if ((active0 & 0xc0000L) != 0L)
            return 19;
         return -1;
      case 3:
         if ((active0 & 0x3ffff87f30000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
            return 19;
         }
         if ((active0 & 0x1000c000L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0x3ffff83600000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
            return 19;
         }
         if ((active0 & 0x4930000L) != 0L)
            return 19;
         return -1;
      case 5:
         if ((active0 & 0x36fb703600000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
            return 19;
         }
         if ((active0 & 0x904880000000L) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x603003400000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
            return 19;
         }
         if ((active0 & 0x30f8700200000L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x201003000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
            return 19;
         }
         if ((active0 & 0x402000400000L) != 0L)
            return 19;
         return -1;
      case 8:
         if ((active0 & 0x201003000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 8;
            return 19;
         }
         return -1;
      case 9:
         if ((active0 & 0x3000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 9;
            return 19;
         }
         if ((active0 & 0x201000000000L) != 0L)
            return 19;
         return -1;
      case 10:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 10;
            return 19;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 19;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 46:
         return jjStartNfaWithStates_0(0, 30, 7);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x3fe0000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1ff80000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x8004000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 91:
         return jjStopAtPos(0, 12);
      case 93:
         return jjStopAtPos(0, 13);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1600000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x820000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 123:
         return jjStopAtPos(0, 10);
      case 125:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x3ffff80000000L);
      case 79:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x104000L);
      case 83:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x20100000000L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 19);
         break;
      case 70:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x40200000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x80400000000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x10010000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100800000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x201000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x402000000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x804002000000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x3018000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xe00000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 76:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 19);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x4100000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x3018000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x804000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40200800000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80400600000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x321981000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x402000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 19);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 19);
         break;
      case 79:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 19);
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x3018000000000L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x100800000000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 19);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20100000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x804000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40280000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x402000000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x281400600000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa6_0(active0, 0x1008000000000L);
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0x2090400000000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x241200000000L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 19);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 19);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 19);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x402000000000L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 19);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20100000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 19);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 19);
         break;
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 19);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 19);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 19);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 19);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x402000000000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 19);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 19);
         break;
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 19);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x201000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 19);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 19);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x201000000000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x201000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 19);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 79:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 25, 19);
         break;
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 24, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfc00873200000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(19);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 35)
                     jjCheckNAddStates(3, 5);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff680000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 34 && kind > 9)
                     kind = 9;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0xfc00873200000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0xffffaf3200000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 19:
                  if ((0x57ffffffc7ffffffL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(19);
                  break;
               case 1:
                  jjAddStates(3, 5);
                  break;
               case 8:
                  if ((0x100007e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(10, 12);
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 13, 1, 2, 4, 10, 11, 15, 13, 12, 14, 16, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\173", "\175", 
"\133", "\135", "\124\122\125\105", "\164\162\165\145", "\106\101\114\123\105", 
"\146\141\154\163\145", "\104\105\106", "\125\123\105", "\120\122\117\124\117", 
"\145\166\145\156\164\111\156", "\145\166\145\156\164\117\165\164", "\146\151\145\154\144", 
"\145\170\160\157\163\145\144\106\151\145\154\144", "\105\130\124\105\122\116\120\122\117\124\117", "\122\117\125\124\105", 
"\124\117", "\116\125\114\114", "\111\123", "\56", "\123\106\102\157\157\154", 
"\123\106\103\157\154\157\162", "\123\106\106\154\157\141\164", "\123\106\111\156\164\63\62", 
"\123\106\116\157\144\145", "\123\106\122\157\164\141\164\151\157\156", 
"\123\106\123\164\162\151\156\147", "\123\106\124\151\155\145", "\123\106\126\145\143\62\146", 
"\123\106\126\145\143\63\146", "\115\106\103\157\154\157\162", "\115\106\106\154\157\141\164", 
"\115\106\111\156\164\63\62", "\115\106\116\157\144\145", "\115\106\122\157\164\141\164\151\157\156", 
"\115\106\123\164\162\151\156\147", "\115\106\124\151\155\145", "\115\106\126\145\143\62\146", 
"\115\106\126\145\143\63\146", null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7ffffffffff01L, 
};
static final long[] jjtoSkip = {
   0xfeL, 
};
static final long[] jjtoSpecial = {
   0x80L, 
};
private ASCII_UCodeESC_CharStream input_stream;
private final int[] jjrounds = new int[20];
private final int[] jjstateSet = new int[40];
protected char curChar;
public ParserTokenManager(ASCII_UCodeESC_CharStream stream)
{
   if (ASCII_UCodeESC_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ParserTokenManager(ASCII_UCodeESC_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_UCodeESC_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 20; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_UCodeESC_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 44 && (0x100100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
